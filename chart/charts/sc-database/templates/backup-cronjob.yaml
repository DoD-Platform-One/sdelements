{{- $jobName := printf "%v-job-%v" ( include "library.trimmedName" . ) "backup"  -}}
{{- $imageTag := default .Chart.AppVersion .Values.imageTag -}}
{{- $imagePullPolicy := default .Values.global.imagePullPolicy .Values.imagePullPolicy -}}
{{- $imageRegistry := required "An image registry needs to be specified in your configuration values!" .Values.global.imageRegistry -}}
{{- $imageOrganization := required "An image organization needs to be specified in your configuration values!" .Values.global.imageOrganization -}}
{{- $imageName := default "postgres-bespoke" .Values.imageName -}}
{{- $imageSource := hasKey .Values "imageSource" | ternary ( printf "%s" .Values.imageSource ) ( default "sde" .Values.global.imageSource ) -}}
{{- $imageRegistryFormat := default "%s/%s-%s-%s:%s" .Values.global.imageRegistryFormat -}}
{{- $uid := default 33 .Values.uid -}}
{{- $gid := default 33 .Values.gid -}}
{{- $fsgid := default 33 .Values.fsgid -}}

{{- $backupMountPoint := default "/backup" .Values.backup.mountPoint -}}
{{- $backupClaimName := printf "%v-%v" ( include "library.trimmedName" . ) "backup-volume-claim" -}}
{{- $failedJobsHistoryLimit := default (default 1 .Values.global.failedJobsHistoryLimit) .Values.backup.failedJobsHistoryLimit -}}
{{- $successfulJobsHistoryLimit := default (default 0 .Values.global.successfulJobsHistoryLimit) .Values.backup.successfulJobsHistoryLimit -}}
{{- $rwxEnabled := required "For this release, global.rwx.enabled must be set. See https://docs.sdelements.com/release/latest/sysadmin/docs/container/upgrade.html for details." (.Values.global.rwx).enabled -}}
{{- if $rwxEnabled }}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ $jobName | quote }}
  labels:
    name: {{ $jobName | quote }}
    {{- include "library.labels" . | nindent 4 }}
spec:
  schedule: {{ default "*/20 * * * *" .Values.backup.schedule | quote }}
  concurrencyPolicy: {{ default "Forbid" .Values.backup.concurrencyPolicy }}
  failedJobsHistoryLimit: {{ $failedJobsHistoryLimit }}
  successfulJobsHistoryLimit: {{ $successfulJobsHistoryLimit }}
  jobTemplate:
    metadata:
      labels:
        name: {{ $jobName | quote }}
        {{- include "library.labels" . | nindent 8 }}
    spec:
      template:
        metadata:
          labels:
            app: {{ $jobName }}
            cron: {{ $jobName }}
        spec:
          {{- if not ((.Values.global.openshift).enabled) }}
          securityContext:
            {{- if not .Values.global.runAsRoot }}
            runAsUser: {{ $uid }}
            runAsGroup: {{ $gid }}
            fsGroup: {{ $fsgid }}
            {{- if semverCompare ">=1.23.0-0" .Capabilities.KubeVersion.GitVersion }}
            fsGroupChangePolicy: "OnRootMismatch"
            {{- end }}
            {{- else }}
            runAsUser: 0
            runAsGroup: 0
            {{- end }}
          {{- end }}
          containers:
          - name: {{ $jobName | quote }}
            image: {{ printf $imageRegistryFormat $imageRegistry $imageOrganization $imageSource $imageName $imageTag | quote }}
            imagePullPolicy:  {{ $imagePullPolicy }}
            command: ["/bin/run_backup.sh"]
            env:
            - name: DATABASE_USER
              value: {{ default "postgres" .Values.clientUser }}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "database.secretName" . }}
                  key: ADMIN_DATABASE_PASSWORD
            - name: DATABASE_HOST
              value: {{ include "database.serviceName" . }}
            {{- if .Values.backup.mailRelayHost }}
            - name: MAIL_RELAYHOST
              value: {{ .Values.backup.mailRelayHost | quote }}
            - name: MAIL_RELAYHOST_PORT
              value: {{ default "25" .Values.backup.mailRelayPort | quote }}
            {{- end }}
            - name: POSTGRES_BACKUP_PATH
              value: {{ default ( printf "%v/db" $backupMountPoint ) .Values.backupPath | quote }}
            - name: BACKUP_ADMIN_EMAIL
              value: {{ default "admin@example.com" .Values.backupAdminEmail | quote }}
            - name: FROM_EMAIL
              value: {{ default "noreply@example.com" .Values.backupFromEmail | quote }}
            - name: KEEP_BACKUP_DAYS
              value: {{ default "14" .Values.keepBackupDays | quote }}
            - name: CLEANUP_BACKUPS
              value: {{ default (true | quote) (.Values.cleanupBackups | quote) }}
            {{- if .Values.backup.resources }}
            resources:
              {{- with .Values.backup.resources }}
                {{- toYaml . | nindent 14 }}
              {{- end }}
            {{- end }}
            {{- if semverCompare ">=1.19.0-0" .Capabilities.KubeVersion.GitVersion }}
            securityContext:
              allowPrivilegeEscalation: false
            {{- end }}
            volumeMounts:
            - mountPath: {{ $backupMountPoint | quote }}
              name: backup
          {{- if .Values.nodeSelector }}
          nodeSelector:
            {{- with .Values.nodeSelector }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
          restartPolicy: OnFailure
          imagePullSecrets:
          - name: {{ include "library.registrySecretName" . }}
          volumes:
          - name: backup
            persistentVolumeClaim:
              claimName: {{ $backupClaimName | quote }}
status: {}
{{- end }}
