{{- $imageName := default "pas-async-worker" .Values.imageName -}}
{{- $imageTag := default .Chart.AppVersion .Values.imageTag -}}
{{- $imagePullPolicy := default .Values.global.imagePullPolicy .Values.imagePullPolicy -}}
{{- $imageRegistry := required "An image registry needs to be specified in your configuration values!" .Values.global.imageRegistry -}}
{{- $imageOrganization := required "An image organization needs to be specified in your configuration values!" .Values.global.imageOrganization -}}
{{- $imageSource := default ( default "sde" .Values.global.imageSource ) .Values.imageSource -}}
{{- $imageRegistryFormat := default "%s/%s-%s-%s:%s" .Values.global.imageRegistryFormat -}}
{{- $contextDict := dict "root" . "dot" .Values -}}

{{- /* CA Certificates */ -}}
{{- $caCertificates := .Values.global.thirdPartyCACertificates -}}

{{- /* Deployment config vars */ -}}
{{- $deploymentName := printf "%v-%v" ( include "library.trimmedName" . ) "pas-async-worker" -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $deploymentName | quote }}
  labels:
    name: {{ $deploymentName | quote }}
    {{- include "library.labels" . | nindent 4 }}
spec:
  replicas: {{ default 1 .Values.replicas }}
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      name: {{ $deploymentName | quote }}
      {{- include "library.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: {{ $deploymentName | quote }}
        {{- include "library.selectorLabels" . | nindent 8 }}
    spec:
      {{ if .Values.global.enableNodeSelector }}
      nodeSelector:
        customer_name: {{ printf "%v" .Release.Name | quote }}
      {{ end }}
      {{- if not ((.Values.global.openshift).enabled) }}
      securityContext:
        {{- if not .Values.global.runAsRoot }}
        runAsUser: {{ default 999 .Values.uid }}
        runAsGroup: {{ default 101 .Values.gid }}
        fsGroup: {{ default 101 .Values.fsgid }}
        {{- if semverCompare ">=1.23.0-0" .Capabilities.KubeVersion.GitVersion }}
        fsGroupChangePolicy: "OnRootMismatch"
        {{- end }}
        {{- else }}
        runAsUser: 0
        runAsGroup: 0
        {{- end }}
      {{- end }}
      containers:
      - name: {{ $deploymentName | quote }}
        image: {{ printf $imageRegistryFormat $imageRegistry $imageOrganization $imageSource $imageName $imageTag | quote }}
        imagePullPolicy: {{ $imagePullPolicy }}
        envFrom:
          - configMapRef:
              name: {{ .Release.Name }}-{{ .Chart.Name }}-env-configmap
          - configMapRef:
              name: {{ include "pas-async-worker.dbConfigmap" . | quote }}
          - configMapRef:
              name: {{ .Release.Name }}-{{ .Chart.Name }}-db-env-configmap
          - configMapRef:
              name: {{ .Release.Name }}-{{ .Chart.Name }}-broker-env-configmap
          - configMapRef:
              name: {{ .Release.Name }}-{{ .Chart.Name }}-shared-storage-env-configmap
        env:
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "pas-async-worker.database.secretName" $contextDict }}
                key: {{ include "pas-async-worker.database.passwordSecretKey" $contextDict }}
          - name: PLUGIN_SERVICE_BROKER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "pas-async-worker.broker.secretName" $contextDict }}
                key: {{ include "pas-async-worker.broker.passwordSecretKey" $contextDict }}
          - name: PAS_ASYNC_WORKER_BROKER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "pas-async-worker.broker.secretName" $contextDict }}
                key: {{ include "pas-async-worker.broker.passwordSecretKey" $contextDict }}
          - name: S3_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: {{ include "pas-async-worker.sharedStorage.secretName" $contextDict }}
                key: {{ include "pas-async-worker.sharedStorage.accessKeyIdSecretKey" $contextDict }}
          - name: S3_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{ include "pas-async-worker.sharedStorage.secretName" $contextDict }}
                key: {{ include "pas-async-worker.sharedStorage.secretAccessKeySecretKey" $contextDict }}
          - name: PAS_ASYNC_WORKER_RESULT_BACKEND
            valueFrom:
              secretKeyRef:
                name: {{ include "pas-async-worker.broker.secretName" $contextDict }}
                key: {{ include "pas-async-worker.broker.resultBackendKey" $contextDict }}
          - name: PLUGIN_SERVICE_RESULT_BACKEND
            valueFrom:
              secretKeyRef:
                name: {{ include "pas-async-worker.broker.secretName" $contextDict }}
                key: {{ include "pas-async-worker.broker.resultBackendKey" $contextDict }}
        {{- if $caCertificates.enabled }}
        volumeMounts:
        - name: sslcert-write-access
          mountPath: /etc/ssl/certs
        - name: cacert-write-access
          mountPath: /usr/local/share/ca-certificates
        {{- /*
          There are 3 "origins" for CA certificates that is defined, mounted to /tmp/{origin}-ca-certificates
          1. `internal` - Certificates created as part of SDE helm chart
          2. `external` - Certificates passed via external Kubernetes ConfigMap
          3. `secret` - Certificates passed via external Kubernetes Secret
        */ -}}
        {{- /* If a customer defines a certificate in the values.yaml */ -}}
        {{- /* This needs to be mounted first because it mounts a whole directory, which overwrites other certs */ -}}
        {{- if $caCertificates.certs }}
        - name: ca-certificate
          mountPath: /tmp/internal-ca-certificates/
        {{- end }}
        {{- if $caCertificates.minioSelfSignedCertSecret }}
        - name: minio-certificate
          mountPath: /tmp/internal-ca-certificates/minio-ca.crt
          subPath: ca.crt
        {{- end }}
        {{- /* If the customer specifies an external CA cert in a configmap */ -}}
        {{- if $caCertificates.externalConfigMapName }}
        - name: external-ca-certificates
          mountPath: /tmp/external-ca-certificates
        {{- end }}
        {{- /* If the customer specifies an external CA cert in a secret */ -}}
        {{- if $caCertificates.externalSecretName }}
        - name: secret-ca-certificates
          mountPath: /tmp/secret-ca-certificates
        {{- end }}
      volumes:
      - name: sslcert-write-access
        emptyDir: {}
      - name: cacert-write-access
        emptyDir: {}
      {{- if $caCertificates.certs }}
      - name: ca-certificate
        configMap:
          name: {{ include "library.trimmedName" . }}-ca-certificate
      {{- end }}
      {{- if $caCertificates.minioSelfSignedCertSecret }}
      - name: minio-certificate
        secret:
          secretName: {{ tpl $caCertificates.minioSelfSignedCertSecret . }}
      {{- end }}
      {{- if $caCertificates.externalConfigMapName }}
      - name: external-ca-certificates
        configMap:
          name: {{ $caCertificates.externalConfigMapName }}
      {{- end }}
      {{- if $caCertificates.externalSecretName }}
      - name: secret-ca-certificates
        secret:
          secretName: {{ $caCertificates.externalSecretName }}
      {{- end }}
      {{- end }}
      imagePullSecrets:
      - name: {{ include "library.registrySecretName" . }}
      restartPolicy: Always
status: {}
