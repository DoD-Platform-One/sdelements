{{- $imageTag := default .Chart.AppVersion .Values.imageTag -}}
{{- $imagePullPolicy := default .Values.global.imagePullPolicy .Values.imagePullPolicy -}}
{{- $imageRegistry := required "An image registry needs to be specified in your configuration values!" ( hasKey .Values "imageRegistry" | ternary  .Values.imageRegistry .Values.global.imageRegistry ) -}}
{{- $imageSource := hasKey .Values "imageSource" | ternary ( printf "%s" .Values.imageSource ) ( default "3rd" .Values.global.imageSource ) -}}
{{- $imageOrganization := hasKey .Values "imageOrganization" | ternary .Values.imageOrganization .Values.global.imageOrganization -}}
{{- $imageName := default "rabbitmq" .Values.imageName -}}
{{- $imageRegistryFormat := hasKey .Values "imageRegistryFormat" | ternary ( default "%s/%s-%s-%s:%s" .Values.imageRegistryFormat ) .Values.global.imageRegistryFormat -}}
{{- $deploymentName := printf "%v-%v" ( include "library.trimmedName" . ) "broker" -}}
{{- $uid := default 100 .Values.uid -}}
{{- $gid := default 101 .Values.gid -}}
{{- $fsgid := default 101 .Values.fsgid -}}
{{- $port := default 5672 .Values.port -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $deploymentName | quote }}
  labels:
    name: {{ $deploymentName | quote }}
    {{- include "library.labels" . | nindent 4 }}
spec:
  replicas: {{ default 1 .Values.replicas }}
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      name: {{ $deploymentName | quote }}
      {{- include "library.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: {{ $deploymentName | quote }}
        {{- include "library.selectorLabels" . | nindent 8 }}
    spec:
      {{- if not ((.Values.global.openshift).enabled) }}
      securityContext:
        {{- if not .Values.global.runAsRoot }}
        runAsUser: {{ $uid }}
        runAsGroup: {{ $gid }}
        fsGroup: {{ $fsgid }}
        {{- if semverCompare ">=1.23.0-0" .Capabilities.KubeVersion.GitVersion }}
        fsGroupChangePolicy: "OnRootMismatch"
        {{- end }}
        {{- else }}
        runAsUser: 0
        runAsGroup: 0
        {{- end }}
      {{- end }}
      {{- if .Values.global.enableNodeSelector }}
      nodeSelector:
        customer_name: {{ printf "%v" ( include "library.trimmedName" . ) | quote }}
      {{- end }}
      containers:
      - name: {{ $deploymentName | quote }}
        image: {{ printf $imageRegistryFormat $imageRegistry $imageOrganization $imageSource $imageName $imageTag | quote }}
        imagePullPolicy: {{ $imagePullPolicy }}
        securityContext:
          allowPrivilegeEscalation: false
        env:
        {{ if (.Values.global.openshift).enabled -}}
        - name: SDE_OPENSHIFT_ENABLED
          value: "true"
        {{ end -}}
        {{ if and .Values.caCertificatePath ( and .Values.serverCertificatePath .Values.serverKeyPath ) -}}
        - name: RABBITMQ_SSL_CACERTFILE
          value: {{ quote .Values.caCertificatePath }}
        - name: RABBITMQ_SSL_CERTFILE
          value: {{ quote .Values.serverCertificatePath }}
        - name: RABBITMQ_SSL_KEYFILE
          value: {{ quote .Values.serverKeyPath }}
        - name: RABBITMQ_SSL_DEPTH
          value: {{ default 2 .Values.caVerificationDepth | quote }}
        - name: RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT
          value: "false"
        - name: RABBITMQ_SSL_VERIFY
          value: {{ default "true" .Values.tlsVerify | quote }}
        {{ end -}}
        - name: RABBITMQ_NODENAME
          value: "rabbit@localhost"
        - name: RABBITMQ_DEFAULT_USER
          value: {{ default "rabbit" .Values.global.broker.adminClientUser | quote }}
        - name: RABBITMQ_DEFAULT_VHOST
          value: {{ default "rabbit" .Values.global.broker.adminVhost | quote  }}
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: {{ include "broker.secretName" . }}
              key: ADMIN_BROKER_PASSWORD
        volumeMounts:
        - mountPath: /var/lib/rabbitmq/mnesia
          name: broker-volume
        ports:
        - containerPort: {{ int $port }}
        {{- if .Values.resources }}
        resources:
        {{- range $limitType, $resources := $.Values.resources }}
            {{ $limitType }}:
            {{- range $resourceKey, $resourceValue := $resources }}
                {{ $resourceKey }}: {{ $resourceValue }}
            {{- end }}
        {{- end }}
        {{- else }}
        resources: {}
        {{- end }}
      volumes:
      - name: broker-volume
        persistentVolumeClaim:
          claimName: "{{ include "library.trimmedName" . }}-broker-volume-claim"
      imagePullSecrets:
      - name: {{ include "library.registrySecretName" . }}
      restartPolicy: Always
status: {}
