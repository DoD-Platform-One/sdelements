# Segments API/Batch traffic from interactive user sessions
map $http_cookie:$http_Authorization $backend_pool {
  default ${DEFAULT_NGINX_BACKEND_URL};
${NGINX_BACKEND_MAP}
}


# Server to redirect http to https
server {
  listen *:${NGINX_PORT} default_server;
  listen [::]:${NGINX_PORT} default_server;
  server_name ${NGINX_HOST};

  set $maintenance "off";
  if (-f /maintenance.enable) {
    set $maintenance "on";
    }
  if ($uri ~* /custom_status/) {
    set $maintenance off;
    }
  if ($maintenance = "on") {
      return 503;
  }

  return 301 https://$host$request_uri;
  access_log  /dev/stdout json_combined;
  error_log   /dev/stderr error;
  client_header_buffer_size 1k;
  client_header_timeout 20;
  client_max_body_size 128k;
  error_page 403 /403.html;
  error_page 404 /404.html;
  error_page 500 /500.html;
  error_page 502 =503 /503.html;
  error_page 503 /503.html;
  large_client_header_buffers 4 8k;
}

# Primary server for https
server {
  listen       *:${NGINX_TLS_PORT} default_server ssl;
  listen       [::]:${NGINX_TLS_PORT} default_server ssl;
  server_name  ${NGINX_HOST};

  # This should only fire in an proxy environment, to ensure the https redirection has happened
  if ($http_x_forwarded_proto = 'http') {
    return 301 https://$http_x_forwarded_host$request_uri;
  }

  # Nameservers for DNS resolution
  ${NAMESERVERS}

  # Use a variable to force force dynamic resolution
  set $hmr_url ${DEFAULT_NGINX_BACKEND_URL};

  # Set SSL/TLS configuration
  ssl_certificate           ${NGINX_SSL_CERT_PATH};
  ssl_certificate_key       ${NGINX_SSL_KEY_PATH};
  ssl_session_cache         shared:SSL:10m;
  ssl_session_timeout       5m;
  ssl_protocols             ${NGINX_SSL_PROTOCOLS};
  ssl_ciphers               ${NGINX_SSL_CIPHERS};
  ssl_prefer_server_ciphers on;

  # Allow setting of maintenance mode using a file
  set $maintenance "off";
  if (-f /.maintenance.enable) {
    set $maintenance "on";
  }
  index  503.html;

  # Configure logs to use stdout/stderr for docker
  access_log  /dev/stdout json_combined;
  error_log   /dev/stderr error;

  # Include development config if present
  include development/*.conf;

  # Include config here if reporting is enabled
  ${NGINX_REPORTING_INCLUDE_CONF}

  # Include config here if JITT is enabled
  ${NGINX_JITT_INCLUDE_CONF}

  # Include pas config here if PAS is enabled
  ${NGINX_PAS_INCLUDE_CONF}

  # Serve static files from local cache.
  location /static/ {
    #  Add config here if JITT enabled
    ${NGINX_JITT_TRY_FILES}

    access_log ${NGINX_STATIC_ACCESS_LOG};
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Proxy-Cache $upstream_cache_status;
    client_max_body_size 1m;
    gzip_types text/plain text/xml text/css application/x-javascript application/javascript;
    proxy_cache static-assets;
    proxy_ignore_headers Cache-Control;
    proxy_cache_valid 200 168h;         # Cache successful requests for 1 week
    proxy_cache_valid 301 302 1h;       # Cache redirect requests for 1 hour
    proxy_cache_valid any 1m;           # Cache all other requests (error) for 1 minute
    proxy_pass $backend_pool;
  }

  # Serve media files from the media volume
  location /media/ {
    alias /media/;
    access_log ${NGINX_STATIC_ACCESS_LOG};
    add_header X-Proxy-Cache HIT;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block";
    client_max_body_size 1m;
    gzip_types text/plain text/xml text/css application/x-javascript application/javascript;
  }

  # Serve cache files from the cache volume
  location /cache/ {
    alias /media/cache/;
    access_log ${NGINX_STATIC_ACCESS_LOG};
    add_header X-Proxy-Cache HIT;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block";
    client_max_body_size 1m;
    gzip_types text/plain text/xml text/css application/x-javascript application/javascript;
  }

  # Required for dynamic content
  location @dynamic {
    proxy_pass            $backend_pool;
    add_header X-Proxy-Cache MISS;
    client_max_body_size  256k;
  }

  # Root for serving maintenance page, etc
  location / {
    root      /custom_status_pages;
    index     503.html;
    if ($maintenance = "on") {
        return 503;
    }
    try_files $uri @dynamic;
  }

  # Configure status code pages
  location ~ (403|404|500|503).html {
    root /custom_status_pages/;
  }

  # Expose custom status location
  location /custom_status/ {
    alias /custom_status_pages/;
  }

  # Allow integrations to send large files
  location ~ /bunits/(.*)/(.*)/(.*)/integration/(.*)/ {
    proxy_pass            $backend_pool;
    client_max_body_size  1024m;
  }

  # Allow large files for import/export
  location /library/import-export/ {
    proxy_pass            $backend_pool;
    client_max_body_size  1024m;
  }

  # Allow large files for analysis files
  location ~ /api/v2/jobs/analysis-file/(.*) {
    proxy_pass            $backend_pool;
    client_max_body_size  1024m;
  }

  # Allow large files for restore
  location ~ ^(/api/v2)?/(data-migration|restore)/ {
    proxy_pass            $backend_pool;
    client_max_body_size  10000m;
  }

  # Restrict large file upload for custom countermeasure mapping
  location ~ /api/v2/connectors/analysis/(.*)/mapping/ {
    proxy_pass            $backend_pool;
    client_max_body_size  10m;
  }
  
  # Disallow external access to endpoints that start with /rpc/
  location /rpc/ {
    return 404;
  }
  
  # Further restrict sizes and set error pages
  # See nginx.conf for more defaults
  client_header_buffer_size 1k;
  client_header_timeout     20;

  large_client_header_buffers 4 8k;

  error_page 403 /403.html;
  error_page 404 /404.html;
  error_page 500 /500.html;
  error_page 502 =503 /503.html;
  error_page 503 /503.html;
  recursive_error_pages on;
}
