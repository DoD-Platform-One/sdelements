{{/*
#### SDElements app deployment template ####

Expects a dict input with root/dot keys with context
Enables creation of an arbitrary number of configurable/programmable SDE workers

*/}}
{{- define "sde.deployment" -}}
{{- $root := get . "root" -}}
{{- $dot := get . "dot" -}}
{{- $imageTag := default ( default $root.Chart.AppVersion $root.Values.global.imageTag ) ( default $root.Values.worker.imageTag $dot.imageTag  ) | toString -}}
{{- $imagePullPolicy := default $root.Values.global.imagePullPolicy $dot.imagePullPolicy -}}
{{- $imageRegistryFormat := default "%s/%s-%s-%s:%s" $root.Values.global.imageRegistryFormat -}}
{{- $imageRegistry := required "An image registry needs to be specified in your configuration values!" ( default $root.Values.global.imageRegistry $root.Values.worker.imageRegistry ) -}}
{{- $imageOrganization := required "An image organization needs to be specified in your configuration values!" ( default $root.Values.global.imageOrganization $root.Values.worker.imageOrganization ) -}}
{{- $imageName := default "web-dynamic" $root.Values.worker.imageName -}}
{{- $imageSource := default ( default "sde" $root.Values.global.imageSource ) ( default $root.Values.worker.imageSource $dot.imageSource ) -}}
{{- $uid := default 33 $root.Values.worker.uid -}}
{{- $gid := default 33 $root.Values.worker.gid -}}
{{- $fsgid := default 33 $root.Values.worker.fsgid -}}
{{- $jobsUid := default 1000 $root.Values.worker.jobsUid -}}
{{- $deploymentName := hasKey $dot "queueVarVal" | ternary ( printf "worker-%v-%v" $dot.niceness $dot.queueVarVal ) ( printf "worker-%v" $dot.niceness ) }}
{{- $releaseName :=  printf "%v-%v" ( include "library.trimmedName" $root ) $deploymentName -}}
{{- $customerName :=  printf "%v" ( include "library.trimmedName" $root ) -}}
{{- $appStateChange := ternary true false (or $root.Release.IsUpgrade $root.Release.IsInstall) -}}

# featureFlag
{{- $enableWorkerDatabaseAffinity := default false $root.Values.global.enableWorkerDatabaseAffinity -}}
{{- $sentryEnabled := default false (eq (($root.Values.worker.sentry).enabled | toString) "<nil>" | ternary ($root.Values.global.sentry).enabled ($root.Values.worker.sentry).enabled) -}}

# ssl variables
{{- $tlsRoot := default "/tls" $root.Values.worker.tlsRoot }}
{{- $certManagerEnabled := eq ( include "certManagerEnabled" ( merge . $root ) ) "true" -}}
{{- $enableInternalTls := eq ( include "enableInternalTls" ( merge . $root ) ) "true" -}}

# App worker ssl variables
{{/* database and broker certs are currently disabled */}}
{{- $tlsDatabaseSecretName := include "tlsSecretName" ( mergeOverwrite $root ( dict "serviceName" "sc-database-client" )) }}
{{- $tlsDatabaseCACertPath := printf "%v/%v" $tlsRoot "database/ca.crt" }}
{{- $tlsDatabaseCertPath := printf "%v/%v" $tlsRoot "database/tls.crt" }}
{{- $tlsDatabaseKeyPath := printf "%v/%v" $tlsRoot "database/tls.key" }}

# Celery worker ssl variables
{{- $tlsBrokerSecretName := include "tlsSecretName" ( mergeOverwrite $root ( dict "serviceName" "sc-broker-client" )) }}
{{- $tlsBrokerCACertPath := printf "%v/%v" $tlsRoot "broker/ca.crt" }}
{{- $tlsBrokerCertPath := printf "%v/%v" $tlsRoot "broker/tls.crt" }}
{{- $tlsBrokerKeyPath := printf "%v/%v" $tlsRoot "broker/tls.key" }}

{{- $tlsDataStoreSecretName := include "tlsSecretName" ( mergeOverwrite $root ( dict "serviceName" "datastore-client" )) }}
{{- $tlsDataStoreCACertPath := printf "%v/%v" $tlsRoot "datastore/ca.crt" }}
{{- $tlsDataStoreCertPath := printf "%v/%v" $tlsRoot "datastore/tls.crt" }}
{{- $tlsDataStoreKeyPath := printf "%v/%v" $tlsRoot "datastore/tls.key" }}
{{- $tlsContext := dict "tlsDataStoreKeyPath" $tlsDataStoreKeyPath "tlsDataStoreCertPath" $tlsDataStoreCertPath "tlsDataStoreCACertPath" $tlsDataStoreCACertPath }}

# Sentry variables
{{- $sentryDSN := ($root.Values.worker.sentry).dsn }}
{{- $sentryEnvironment := default $root.Release.Namespace (default ($root.Values.global.sentry).environment ($root.Values.worker.sentry).environment) }}
{{- $sentrySampleRate := default 0.1 (default ($root.Values.global.sentry).sampleRate ($root.Values.worker.sentry).sampleRate) }}
{{- $sentryTraceSampleRate := default 0.1 (default ($root.Values.global.sentry).traceSampleRate ($root.Values.worker.sentry).traceSampleRate) }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $releaseName | quote }}
  labels:
    name: {{ $releaseName | quote }}
    {{- include "library.labels" $root | nindent 4 }}
spec:
  replicas: {{ default 1 $dot.replicas }}
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      name: {{ $releaseName | quote }}
      {{- include "library.selectorLabels" $root | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: {{ $releaseName | quote }}
        {{- include "library.selectorLabels" $root | nindent 8 }}
    spec:
      {{- if eq $enableWorkerDatabaseAffinity true }}
      {{- if or (eq $deploymentName "worker-10") (eq $deploymentName "worker-17") }}
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values:
                - {{ $customerName }}-database
            topologyKey: topology.kubernetes.io/zone
      {{- end }}
      {{- end }}
      {{- if not ((.Values.global.openshift).enabled) }}
      securityContext:
        {{- if not $root.Values.global.runAsRoot }}
        runAsUser: {{ $uid }}
        runAsGroup: {{ $gid }}
        fsGroup: {{ $fsgid }}
        {{- if semverCompare ">=1.23.0-0" $root.Capabilities.KubeVersion.GitVersion }}
        fsGroupChangePolicy: "OnRootMismatch"
        {{- end }}
        {{- else }}
        runAsUser: 0
        runAsGroup: 0
        {{- end }}
      {{- end }}
      {{- if $root.Values.global.enableNodeSelector }}
      nodeSelector:
        customer_name: {{ printf "%v" ( include "library.trimmedName" $dot ) | quote }}
      {{- end }}
      containers:
      - name: {{ $releaseName | quote }}
        image: {{ printf $imageRegistryFormat $imageRegistry $imageOrganization $imageSource $imageName $imageTag | quote }}
        imagePullPolicy:  {{ $imagePullPolicy }}
        {{- if eq ( hasKey $dot "queueVarName" ) ( false ) }}
        readinessProbe:
          httpGet:
            path: {{ default "/accounts/login/" $dot.readinessPath | quote }}
            port: {{ default 8080 $dot.port }}
            scheme: HTTP
          timeoutSeconds: 5
          initialDelaySeconds: 5
          periodSeconds: 5
        {{- end }}
        args:
        - /bin/bash
        - -c
        - {{ required "You must specify a startup script to run for the SDE container" $dot.startupScript | quote }}
        securityContext:
          allowPrivilegeEscalation: false
        env:
        {{- dict "root" (merge $root $tlsContext) "dot" $dot | include "sde.environment" | nindent 8 }}
        {{- range $root.Values.worker.extraEnvVars }}
        - name: {{ .name | quote }}
          value: {{ .value | quote }}
        {{- end }}
        {{/* Disable broker internal TLS for now */}}
        {{- if and $enableInternalTls false }}
        - name: SDE_BROKER_USE_SSL
          value: "TRUE"
        - name: SDE_BROKER_CLIENT_CERT
          value: {{ $tlsBrokerCertPath }}
        - name: SDE_BROKER_CLIENT_KEY
          value: {{ $tlsBrokerKeyPath }}
        - name: SDE_BROKER_ROOT_CERT
          value: {{ $tlsBrokerCACertPath }}
        {{- end }}
        {{- if $sentryEnabled }}
        - name: SDE_SENTRY_DSN
          value: {{ required "SDE_SENTRY_DSN must be specified if Sentry configuration is enabled." $sentryDSN | quote }}
        - name: SDE_SENTRY_ENVIRONMENT
          value: {{ $sentryEnvironment | quote }}
        - name: SDE_SENTRY_SAMPLE_RATE
          value: {{ $sentrySampleRate | quote }}
        - name: SDE_SENTRY_TRACE_SAMPLE_RATE
          value: {{ $sentryTraceSampleRate | quote }}
        {{- end }}
        {{- if $dot.resources }}
        resources:
        {{- range $limitType, $resources := $dot.resources }}
            {{ $limitType }}:
            {{- range $resourceKey, $resourceValue := $resources }}
                {{ $resourceKey }}: {{ $resourceValue }}
            {{- end }}
        {{- end }}
        {{- else }}
        resources: {}
        {{- end }}
        volumeMounts:
        {{- if $enableInternalTls }}
        - mountPath: {{ printf "%v/%v" $tlsRoot "datastore" | quote }}
          name: tls-datastore
          readOnly: true
        {{- end }}
      imagePullSecrets:
      - name: security-compass-secret
      restartPolicy: Always
      volumes:
      {{- if $enableInternalTls }}
      - name: tls-datastore
        secret:
          secretName: {{ $tlsDataStoreSecretName }}
          defaultMode: 0400
      {{- end }}
status: {}
{{- end }}
